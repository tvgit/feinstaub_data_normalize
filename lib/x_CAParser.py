# -*- coding: utf-8 -*-
# 2017_07_27-23_58_16 generated by: >pyprogen.py<

# Ad ConfArgParse
# https://pypi.python.org/pypi/ConfArgParse

import confargparse
import sys
try:
    from lib.ppg_log import p_log_init, p_log_start, p_log_this, p_log_end
    from lib.p_utils import p_file_exists
except:
    pass

args = None

def args_log (args):
    # log args in >y_main.log<
    for key, value in vars(args).iteritems():
        if hasattr(x_glbls.arg_ns, key):
            p_log_this(str(key) + ' = ' + str(value))

def args_to_glbls (args):
    # Copy args name-space to x_glbls.arg_ns
    for key, value in vars(args).iteritems():
        if hasattr(x_glbls.arg_ns, key):
            setattr(x_glbls.arg_ns, key, value)
    args_log (args)

def x_parser(command = '', cfg_path_tmp=''):
    # p_log_this()
    parser = confargparse.ConfArgParser(description='Program: feinstaub_data_normalize.py')
    # exclude positional args when exporting conf-file
    # if (command <> '--export-conf-file') and (command <> 'ignore_pos_args'):
    #     pass

    # DO NOT FORGET: DEFINITION IN x_globals.py

    parser.add_argument('-i', r'--fn_data_in',  default=r'DataIn.dat'  , help = 'name of data input file')
    parser.add_argument('-o', r'--fn_data_out', default=r'DataOut.dat' , help = 'name of data output file')

    # args for module: >fstb_dta_to_db_mod.py<
    parser.add_argument(      '--db_JSON_dir', default=r'.'                , help = ' Directory containing SQL-db with JSON strings')
    parser.add_argument(      '--db_JSON_fn' , default=r'feinstaub_0011.db', help = ' Filename of SQL-db with JSON strings')
    parser.add_argument(      '--files_JSON_dir', default=r'./feinstaublog', help = ' Directory with JSON data files.')

    # args for module: >fstb_dta_to_db_mod.py<
    # db_norm_fn  = r'C:\tmp\sqlite\feinstaub_0011_NORM.db'
    parser.add_argument(      '--db_norm_dir', default=r'.'                     , help = ' Directory containing SQL-db with normalised data')
    parser.add_argument(      '--db_norm_fn' , default=r'feinstaub_0011_NORM.db', help = ' Filename of SQL-db containing SQL-db with normalised data')

    global args
    # log default args
    p_log_this()
    # args = parser.parse_args()
    # args_log (args)

    if (command == '--export-conf-file'):
        mssge = '| x_CAParser.py: generating & writing: ' + cfg_path_tmp
        print mssge ; print '-' * 20 ; p_log_this(mssge)
        # NOTE: >parser.parse_args('--export-conf-file' ...) will EXIT!<
        parser.parse_args(['--export-conf-file', cfg_path_tmp])
        # x_CAParser has written cfg-file
        # nota: parser.parse_args(['--export-conf-file', cfg_path_tmp]) exits module!
    elif ((command == '--conf-file') and str(cfg_path_tmp != '')):
        # read conf-file:
        param_list = [command, cfg_path_tmp]
        p_log_this('Trying to read from: >' + str(cfg_path_tmp) + '<')
        args = parser.parse_args(param_list)
        args_to_glbls (args)  # set values in >x_glbls.arg_ns<
    else:
        # log default args
        p_log_this('cmdline or default args:')
        args = parser.parse_args()
        args_log (args)
        # cmdline pos.args / opt.args
        param_list = None
        p_log_this('after reading cmdline args:')
        args = parser.parse_args(param_list)
        args_to_glbls (args)  # set values in >x_glbls.arg_ns<


if __name__ == "__main__":
    # This branch should have been called by >pyprogen.py<
    from   ppg_log   import p_log_init, p_log_start, p_log_this, p_log_end
    print '-' * 20
    print '| x_CAParser.py: running'
    print '|',
    p_log_init(log_dir = r'.\feinstaub_data_normalize\log', log_fn = r'x_CAParser')
    p_log_start()
    p_log_this(' generating cfg-file')
    cfg_path_tmp = sys.argv[1]
    if not cfg_path_tmp:
        mssge =   '| x_CAParser: No output path for cfg-file?? '
        print mssge ; p_log_this(mssge)
        cfg_path_tmp = os.path.join('.', 'main\cfg', 'conf.ini')
        mssge = '| x_CAParser: Setting output path to: ' + str(cfg_path_tmp)
        print mssge ; p_log_this(mssge)
    else:
        mssge = '| output path for cfg-file:            ' + str(cfg_path_tmp)
        print mssge ; p_log_this(" ".join(mssge.split()))
        # mssge = " ".join(mssge.split())
        # p_log_this(mssge)
    x_parser('--export-conf-file', cfg_path_tmp)
    # NOTE: in func >x_parser()<
    # calling >parser.parse_args('--export-conf-file' ...)
    # will EXIT!
else:
    import lib.x_glbls as x_glbls
    pass

# 2017_07_27-23_58_16